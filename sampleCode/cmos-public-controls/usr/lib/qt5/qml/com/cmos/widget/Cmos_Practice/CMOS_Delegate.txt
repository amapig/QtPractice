公用控件之CMOS——Delegate.qml
说明：此控件主要适用于CMOS_ListView的delegate作为基础使用，其主要体现了CMOS_ListView编辑进行交互的模式。其有左侧右侧功能区进行显示，用户可以赋予对应的内容进行处理。通常用户需要设定是可拖动的。其长按会请求进入编辑模式，请求CMOS_ListView的changeEditMode函数。此信号会修改CMOS_ListView的编辑模式，CMOS_ListView的isEditMode通过Binding与此空间的isEditMode进行绑定。
当进行拖动的时候会出发CMOS_ListView的curDragItemChanged信号
控件会监听resetDelegateState信号，完成相应的内容
控件会监听curDragItemChanged信号，如果是isExclusive的，且当前拖动对象不是对象本省则恢复当前的拖动状态及现实状态。此控件最好结合CMOS_ListView一起使用并察看响应的借口函数

property bool isEditMode:false //与CMOS_ListView的isEditMode进行Binding，检测是否处于编辑模式，如果是编辑模式的，则现实编辑部分。
    property bool canTag:false//true :show else hide  此元素是否可以标记，默认是false，标记时现实标记状态，否则不显示
    property bool canDrag:false 标记是否可以被dragged拖动，编辑模式下是不能拖动的，即此会设置为false的
    property bool initDragVal:false 标记是否可以被拖动的原始值，主要用于在拖动时如果进入编辑模式时记录状态
    property bool isTagged: false 标记当前状态是否标记，如果标记状态发生变化时，会调用CMOS_ListView的checkItem信号。如果此用于非CMOS_ListDelegate的listview中的时候，则需要listview提供checkItem接口
    property bool dragMoving: false 标记当前是否正在被拖动。左右设定了10个像素作为误差处理

    property bool movingLeft: false 表示当前的拖动状态是否向左侧拖动
    property bool movingRight:false 表示当前的拖动状态是否向右侧拖动

    property int pressX:0 鼠标按下的时候的x起始坐标
    property int pressY:0 鼠标按下的时候的y起始坐标

    property Item leftBar:null 左侧功能区，用于拖动之后显示的隐藏内容
    property Item rightBar:null 右侧功能区，用于拖动之后显示的隐藏内容

    property int leftBarMargin:35 左侧功能区leftbar与左侧边界的距离
    property int rightBarMargin:35 右侧功能区rightbar与右侧边界的距离

    property int lMargin: 20 左侧边距大小
    property int rMargin: 20 右侧边距大小
    property int tMargin: 5  顶端边距大小
    property int bMargin: 5  底端边距大小
    property bool isExclusive:false 独立性，即一个listview是否在其他listview拖动的时候返回，默认是false，会检测CMOS_ListView信号onCurDragItemChanged，完成对应的处理

function toInitState()用于处理本控件的处理状态，进入初始状态。

property Component delegateCmp:delegate的普通控件。
property Component editModeCmp:用于编辑状态现实的编辑控件，默认使用CMOS_Button。
property Component backgroundCmp背景内容，默认使用Image作为其控件


example：
    CMOS_Delegate{
        isEditMode : false
        canDrag: true
    }

