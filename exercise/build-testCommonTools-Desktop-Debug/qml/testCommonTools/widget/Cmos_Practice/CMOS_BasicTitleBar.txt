公用控件之CMOS_BasicTitleBar.qml
说明：目前系统统一规定使用的是TitleBar都可以划分为四部分内容，即背景区（background：默认使用Rectangle），左侧区（leftArea：一般以按钮为主，默认使用CMOS_Button），中间区（middleArea：一般以现实标题或编辑为主，默认使用Label现实状态），以及右侧区（rightArea：一般以按钮为主，默认使用CMOS——Button）。所以实现此作为基础titlebar的控件，使用者可以根据自己的需求进行自我定制。为了方便各位的使用，我们在最大的程度上使用了频率最高的样式控件作为默认控件，正常情况可直接使用，以下解释相关参数及使用用例。

signal：
	lTrigger():左侧区域使用默认左侧区域点击时触发
	rTigger():右侧区域使用默认按钮点击时触发
attr：
	//margins
	property int lMargin:20 左侧边距
	property int rMargin:20 右侧边距
	property int tMargin:10 顶端边距
	property int bMargin:14 底端边距
	//space between items
	property int spacing:20 各个模块之间的间隔

	property bool enableLeft:true 使能左侧区域，如果为false则不可见
	property bool enableMiddle:true 使能中间区域，如果为false则不可见
	property bool enableRight:true 使能右侧，如果为false则不可见

	property string title :""  默认中间区域Label使用的文本内容
	property color titleColor: "#000000" 默认中间区域Label使用的文本颜色
	property int titleFontSize: 默认中间区域Label使用的字体pixelSize大下

	property string leftText:"取消" 默认左侧区域按钮使用的文本
 	property string leftIcon:""//images/backico.png 默认左侧区域按钮使用的图表

	property bool leftPressed: false//左侧按钮是否按下状态
	property string rightText:""默认右侧区域按钮使用的文本
	property string rightIcon:"images/moreico.png" 默认左侧区域按钮使用的图表
	property bool rightPressed:false //右侧按钮是否按下
	property Component leftButtonStyle:null  默认左侧区域使用的ButtonStyle，用户可根据自己特点定制
	property Component rightButtonStyle:null默认右侧区域使用的ButtonStyle，用户可根据自己特点定制

	property Component backgroundComponent 背景，用户可根据实际情况自行定制，默认使用Rectangle（系统统一风格）
	property Component leftComponent 左侧区域，用户可以根据自己需求替换，默认使用CMOS_Button，点击触发lTrigger信号
	property Component middleComponent:中间区域，用户可根据自己需求进行定制，默认使用Label，现实title文本信息
	property Component rightComponent:rCmp右侧区域，用户可以根据自己需求替换，默认使用CMOS_Button，点击触发rTrigger信号

	property CMOS_Button leftButton:leftLd.item 表示左侧区域的Component对应的item，需要注意必须加载完成才会创建，否则可能为空
	property CMOS_Button rightButton:rightLd.item表示右侧区域的Component对应的item，需要注意必须加载完成才会创建，否则可能为空
	property Item background :backgroundLd.item表示background背景区域的Component对应的item，需要注意必须加载完成才会创建，否则可能为空
	property Item middleArea :backgroundLd.item表示label侧区域的Component对应的item，需要注意必须加载完成才会创建，否则可能为空

	property color bgColor:"white" 背景使用rectang时背景颜色
	property color bgBorderColor:"#accccc"背景使用rectang时背景border颜色
	property int bgBorderWidth:1背景使用rectang时背景border宽度
	property string bgImgSource:""背景使用图片时图片位置
	property bool isBgUseImage:false背景是否使用图片，默认为false即使用rectangle
    用户如果需要更改背景，可以设置上述常用属性或者background的item进行更多属性的更改

/////////////////////////////////////////
以上4个component在初始化时没有创建，但可以在onComplete之后就可以通过对应leftButton rightButton及middleArea和background进行访问并设置响应的数据
/////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
/////////////////以下为了提供默认左右两侧区域按钮样式调整使用，可详细CMOS——Button.txt文档，如果修改太多其实更好的建议可以使用CMOS_Button.xml进行重新写反而会更明朗，当然从使用角度来讲还是需要将此提供出来，便于统一管理///////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
 property bool leftIsHorizontal: false //true:icon left text right  false:reverse  //描述左侧按钮图形文本均有时的显示布局默认风格，默认使用垂直
    property bool leftIsIconBefore:false//描述左侧按钮图形文本均有时icon是否在text之前，默认false，及文本在前面
    property bool leftIsBgUseImage:false//描述左侧按钮背景使用rectangle还是images，默认使用rectangle

    property color leftFontColor:leftPressed?"#ffffff":"#1ca72b"//描述左侧按钮文本颜色
    property color leftBgColor:leftPressed?"#1ca72b":"#ffffff"//描述左侧按钮使用rectangle背景时的背景颜色
    property int leftFontSize: 36//描述左侧按钮文本大小（pixel）
    property string leftBgIconSource: leftPressed?"images/bnbgactive.png":"images/bnbg.png" //描述左侧使用图片背景时背景图片
    property int leftBorderWidth: 1 //描述左侧使用rectangle背景时边界宽度
    property color leftBorderColor: "black" //描述左侧使用rectangle背景时边界颜色
    property int leftSpacing: 20 //描述左侧按钮文本与图片的距离
    property int leftlMargin:30  //描述左侧按钮内容与边界的左侧检举
    property int leftrMargin:30//描述左侧按钮内容与边界的右侧检举
    property int lefttMargin:16//描述左侧按钮内容与边界的顶侧检举
    property int leftbMargin:16//描述左侧按钮内容与边界的底侧检举

    property bool rightIsHorizontal: false //true:icon left text right  false:reverse //描述右侧按钮图形文本均有时的显示布局默认风格，默认使用垂直
    property bool rightIsIconBefore:false//描述右侧按钮图形文本均有时icon是否在text之前，默认false，及文本在前面
    property bool rightIsBgUseImage:false//描述右侧按钮背景使用rectangle还是images，默认使用rectangle

    property color rightFontColor:rightPressed?"#ffffff":"#1ca72b"//描述右侧按钮文本颜色
    property color rightBgColor:rightPressed?"#1ca72b":"#ffffff"//描述右侧按钮使用rectangle背景时的背景颜色
    property int rightFontSize: 36 //描述右侧按钮文本大小（pixel）
    property string rightBgIconSource:rightPressed?"images/bnbgactive.png":"images/bnbg.png"//描述右侧使用图片背景时背景图片
    property int rightBorderWidth: 1 //描述右侧使用rectangle背景时边界宽度
    property color rightBorderColor: "black"//描述右侧使用rectangle背景时边界颜色

    property int rightSpacing: 20//描述右侧按钮文本与图片的距离
    property int rightlMargin:30//描述右侧按钮内容与边界的左侧检举
    property int rightrMargin:30//描述右侧按钮内容与边界的右侧检举
    property int righttMargin:16//描述右侧按钮内容与边界的顶侧检举
    property int rightbMargin:16//描述右侧按钮内容与边界的底侧检举
/////////////////////////////////////////////////////////////////////////
/////////////////以上为了提供默认左右两侧区域样式调整使用，可相见CMOS——Button.txt文档，如果修改太多其实更好的建议可以使用CMOS_Button.xml进行重新写反而会更明朗，当然从使用角度来讲还是需要将此提供出来，便于统一管理///////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////





example：
利用此实现编辑模式，代码如下：
1、自我定义相应内容
CMOS_BasicTitleBar{
    id:basicTitleBar
    enableLeft: false
    enableMiddle: true
    enableRight:false
    implicitWidth:640
    implicitHeight: 70

    lMargin:14
    rMargin:20
    tMargin:10
    bMargin:14
    spacing:20

    leftComponent:CMOS_Button{
        id:searchButton
        lMargin:4
        rMargin:6
        tMargin:4
        bMargin:4
        iconSource:"images/search.png"
        onClicked: basicTitleBar.lTrigger()
    }
    middleComponent: TextField{
        implicitHeight: 70
        font.pixelSize: 30
        placeholderText: "搜索或输入网址"
        style:TextFieldStyle{
            id:textFieldStyle
            padding { top: 4 ; left: 4 ; right: 6 ; bottom:4 }
            background: Item{
                implicitWidth: 100
                implicitHeight: 24
            }
        }
    }

    rightComponent: CMOS_Button{
        iconSource: "images/deleteico.png"
        lMargin:4
        rMargin:6
        tMargin:4
        bMargin:4
        onClicked: basicTitleBar.rTrigger()
    }
}

2、使用默认值实现topbar，代码如下：
CMOS_BasicTitleBar{
    implicitWidth: parent.width
    implicitHeight: 94
    lMargin: 20
    tMargin: 10
    bMargin: 10
    rMargin: 20
    spacing:20

    enableMiddle: false
    enableRight: false

    leftIcon: "images/backico.png"
    leftText:""
    rightIcon: "images/moreico.png"
    rightText:""
    title:"topic title text"
    onLTrigger: console.log("CMOS_TopTitleBar  onlTrigger")
    onRTrigger: console.log("CMOS_TopTitleBar  onrTrigger")

    anchors.top: parent.top
    anchors.left:parent.left
    anchors.right: parent.right
    
    z:parent.z+1
}


特别注意，因为在使用component属性，在整个控件加载完成之前其对应的item是空的，如果加载完成之后就可以访问对应的item属性进行响应的功能设置。这样就可以访问大量的内置属性，在此以替代暴露所有属性。因为使用了CMOS_BasicTitleBar，所以对于不同的区域提供了可供访问的item属性，一般是leftButton，rightButton及middleArea以及background。在控件加载完之后就可以访问并通过这写对象属性访问一些封装属性，以达到全面属性覆盖。
